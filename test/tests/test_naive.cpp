#include <iostream>

#include "../lib/catch.hpp"
#include "../../src/helper.hpp"
#include "../../src/naive.hpp"
#include "../../src/oblivious.hpp"
#include "../../src/oblivious_s.hpp"
#include "../../src/oblivious_cores.hpp"
#include "../../src/oblivious_s_flip.hpp"
#include "../../src/naive_flip.hpp"


TEST_CASE("First simple testcase", "[Naive, empty]"){
    int **resA;
    int **resB;
    int **resBs;
    int **resBc;
    int **resNaiveFlip;
    int **resOblFlip;
    int **A;
    int **B;
    int const m = 25;
    int const n = 25;
    int const p = 25;

    helper::matrix::initialize_matrix(A, m, n);
    helper::matrix::initialize_matrix(B, n, p);

    helper::matrix::initialize_matrix(resA, m, p);
    helper::matrix::initialize_matrix(resB, m, p);
    helper::matrix::initialize_matrix(resBs, m, p);
    helper::matrix::initialize_matrix(resBc, m, p);
    helper::matrix::initialize_matrix(resNaiveFlip, m, p);
    helper::matrix::initialize_matrix(resOblFlip, m, p);

    unsigned a = 1;
    for (unsigned i = 0u; i < m; i++){
        for(unsigned j = 0u; j < n; j++){
            A[i][j] = a;
            B[i][j] = a;
            a++;
        }
    }

    matmul::naive::multiply((const int **) A, (const int **) B, m, n, p, resA, 0);
    matmul::oblivious::multiply((const int **) A, (const int **) B, m, n, p, resB, 0);
    matmul::oblivious_s::multiply((const int **) A, (const int **) B, m, n, p, resBs, 10);
    matmul::oblivious_c::multiply((const int **) A, (const int **) B, m, n, p, resBc, 8);

    matmul::naive_flip::build(A, B, m, n, p);
    matmul::naive_flip::multiply((const int **) A, (const int **) B, m, n, p, resNaiveFlip, 0);
    matmul::oblivious_s_flip::multiply((const int **) A, (const int **) B, m, n, p, resOblFlip, 4);

    int result[m][p] = {{130325,130650,130975,131300,131625,131950,132275,132600,132925,133250,133575,133900,134225,134550,134875,135200,135525,135850,136175,136500,136825,137150,137475,137800,138125},
                        {318450,319400,320350,321300,322250,323200,324150,325100,326050,327000,327950,328900,329850,330800,331750,332700,333650,334600,335550,336500,337450,338400,339350,340300,341250},
                        {506575,508150,509725,511300,512875,514450,516025,517600,519175,520750,522325,523900,525475,527050,528625,530200,531775,533350,534925,536500,538075,539650,541225,542800,544375},
                        {694700,696900,699100,701300,703500,705700,707900,710100,712300,714500,716700,718900,721100,723300,725500,727700,729900,732100,734300,736500,738700,740900,743100,745300,747500},
                        {882825,885650,888475,891300,894125,896950,899775,902600,905425,908250,911075,913900,916725,919550,922375,925200,928025,930850,933675,936500,939325,942150,944975,947800,950625},
                        {1070950,1074400,1077850,1081300,1084750,1088200,1091650,1095100,1098550,1102000,1105450,1108900,1112350,1115800,1119250,1122700,1126150,1129600,1133050,1136500,1139950,1143400,1146850,1150300,1153750},
                        {1259075,1263150,1267225,1271300,1275375,1279450,1283525,1287600,1291675,1295750,1299825,1303900,1307975,1312050,1316125,1320200,1324275,1328350,1332425,1336500,1340575,1344650,1348725,1352800,1356875},
                        {1447200,1451900,1456600,1461300,1466000,1470700,1475400,1480100,1484800,1489500,1494200,1498900,1503600,1508300,1513000,1517700,1522400,1527100,1531800,1536500,1541200,1545900,1550600,1555300,1560000},
                        {1635325,1640650,1645975,1651300,1656625,1661950,1667275,1672600,1677925,1683250,1688575,1693900,1699225,1704550,1709875,1715200,1720525,1725850,1731175,1736500,1741825,1747150,1752475,1757800,1763125},
                        {1823450,1829400,1835350,1841300,1847250,1853200,1859150,1865100,1871050,1877000,1882950,1888900,1894850,1900800,1906750,1912700,1918650,1924600,1930550,1936500,1942450,1948400,1954350,1960300,1966250},
                        {2011575,2018150,2024725,2031300,2037875,2044450,2051025,2057600,2064175,2070750,2077325,2083900,2090475,2097050,2103625,2110200,2116775,2123350,2129925,2136500,2143075,2149650,2156225,2162800,2169375},
                        {2199700,2206900,2214100,2221300,2228500,2235700,2242900,2250100,2257300,2264500,2271700,2278900,2286100,2293300,2300500,2307700,2314900,2322100,2329300,2336500,2343700,2350900,2358100,2365300,2372500},
                        {2387825,2395650,2403475,2411300,2419125,2426950,2434775,2442600,2450425,2458250,2466075,2473900,2481725,2489550,2497375,2505200,2513025,2520850,2528675,2536500,2544325,2552150,2559975,2567800,2575625},
                        {2575950,2584400,2592850,2601300,2609750,2618200,2626650,2635100,2643550,2652000,2660450,2668900,2677350,2685800,2694250,2702700,2711150,2719600,2728050,2736500,2744950,2753400,2761850,2770300,2778750},
                        {2764075,2773150,2782225,2791300,2800375,2809450,2818525,2827600,2836675,2845750,2854825,2863900,2872975,2882050,2891125,2900200,2909275,2918350,2927425,2936500,2945575,2954650,2963725,2972800,2981875},
                        {2952200,2961900,2971600,2981300,2991000,3000700,3010400,3020100,3029800,3039500,3049200,3058900,3068600,3078300,3088000,3097700,3107400,3117100,3126800,3136500,3146200,3155900,3165600,3175300,3185000},
                        {3140325,3150650,3160975,3171300,3181625,3191950,3202275,3212600,3222925,3233250,3243575,3253900,3264225,3274550,3284875,3295200,3305525,3315850,3326175,3336500,3346825,3357150,3367475,3377800,3388125},
                        {3328450,3339400,3350350,3361300,3372250,3383200,3394150,3405100,3416050,3427000,3437950,3448900,3459850,3470800,3481750,3492700,3503650,3514600,3525550,3536500,3547450,3558400,3569350,3580300,3591250},
                        {3516575,3528150,3539725,3551300,3562875,3574450,3586025,3597600,3609175,3620750,3632325,3643900,3655475,3667050,3678625,3690200,3701775,3713350,3724925,3736500,3748075,3759650,3771225,3782800,3794375},
                        {3704700,3716900,3729100,3741300,3753500,3765700,3777900,3790100,3802300,3814500,3826700,3838900,3851100,3863300,3875500,3887700,3899900,3912100,3924300,3936500,3948700,3960900,3973100,3985300,3997500},
                        {3892825,3905650,3918475,3931300,3944125,3956950,3969775,3982600,3995425,4008250,4021075,4033900,4046725,4059550,4072375,4085200,4098025,4110850,4123675,4136500,4149325,4162150,4174975,4187800,4200625},
                        {4080950,4094400,4107850,4121300,4134750,4148200,4161650,4175100,4188550,4202000,4215450,4228900,4242350,4255800,4269250,4282700,4296150,4309600,4323050,4336500,4349950,4363400,4376850,4390300,4403750},
                        {4269075,4283150,4297225,4311300,4325375,4339450,4353525,4367600,4381675,4395750,4409825,4423900,4437975,4452050,4466125,4480200,4494275,4508350,4522425,4536500,4550575,4564650,4578725,4592800,4606875},
                        {4457200,4471900,4486600,4501300,4516000,4530700,4545400,4560100,4574800,4589500,4604200,4618900,4633600,4648300,4663000,4677700,4692400,4707100,4721800,4736500,4751200,4765900,4780600,4795300,4810000},
                        {4645325,4660650,4675975,4691300,4706625,4721950,4737275,4752600,4767925,4783250,4798575,4813900,4829225,4844550,4859875,4875200,4890525,4905850,4921175,4936500,4951825,4967150,4982475,4997800,5013125}};

    for (unsigned i = 0; i < m; ++i) {
        for(unsigned j = 0; j < p; j++){
            REQUIRE(result[i][j] == resA[i][j]);
            REQUIRE(resA[i][j] == resB[i][j]);
            REQUIRE(resB[i][j] == resBs[i][j]);
            REQUIRE(resBs[i][j] == resBc[i][j]);
            REQUIRE(resBs[i][j] == resNaiveFlip[i][j]);
            REQUIRE(resNaiveFlip[i][j] == resOblFlip[i][j]);
        }
    }

    helper::matrix::destroy_matrix(A);
    helper::matrix::destroy_matrix(B);
    helper::matrix::destroy_matrix(resA);
    helper::matrix::destroy_matrix(resB);
    helper::matrix::destroy_matrix(resBs);
    helper::matrix::destroy_matrix(resBc);
    helper::matrix::destroy_matrix(resNaiveFlip);
    helper::matrix::destroy_matrix(resOblFlip);
}
